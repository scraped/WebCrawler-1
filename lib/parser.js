// Generated by CoffeeScript 1.11.1
var Cheerio, Parser, StopWords, Url, _;

_ = require('lodash');

Url = require('url');

Cheerio = require('cheerio');

StopWords = require('../data/stopwords-all.json');

Parser = (function() {
  function Parser() {}

  Parser.prototype.getLinks = function(body, domain) {
    domain = domain.replace(/^https?:\/\//, '');
    return new Promise((function(_this) {
      return function(resolve) {
        var urls;
        urls = [];
        console.log(_this.removeScriptsTags(body));
        _this.$ = Cheerio.load(body);
        _this.$('a').each(function(index, link) {
          var url;
          url = _this.$(link).attr('href');
          if (url && url !== void 0) {
            return urls.push(url);
          }
        });
        urls.forEach(function(url, index) {
          var url_domain;
          if (url && url !== void 0) {
            url = _this.url(url, domain);
            if (url && url !== void 0) {
              url_domain = url.replace(/.*?:\/\//g, '').replace(/\/$/, '');
              if (url_domain !== domain) {
                return urls[index] = url;
              } else {
                return urls.splice(index, 1);
              }
            }
          }
        });
        urls.forEach(function(url, index) {
          if (url === '/') {
            return urls.splice(index, 1);
          }
        });
        return resolve(_.uniq(urls));
      };
    })(this));
  };

  Parser.prototype.isStopWord = function(word) {
    var locale, locales;
    locales = ['en', 'fr'];
    for (locale in StopWords) {
      if (locales.indexOf(locale) >= 0) {
        return StopWords[locale].indexOf(word) >= 0;
      }
    }
  };

  Parser.prototype.getWords = function(body, langs, limit) {
    var corpus, text, w, words;
    if (limit == null) {
      limit = 20;
    }
    words = [];
    corpus = [];
    text = this.$('body').text();
    text = text.replace(/\s+/g, " ").replace(/[^a-zA-Z ]/g, "").toLowerCase();
    text.split(' ').forEach((function(_this) {
      return function(word) {
        if (_this.isStopWord(word)) {
          return;
        }
        if (word.length < 4 || word.length > 20) {
          return;
        }
        if (corpus[word]) {
          return corpus[word]++;
        } else {
          return corpus[word] = 1;
        }
      };
    })(this));
    for (w in corpus) {
      words.push({
        word: w,
        count: corpus[w]
      });
    }
    words.sort(function(a, b) {
      return b.count - a.count;
    });
    return words.slice(0, limit);
  };

  Parser.prototype.url = function(url, domain) {
    if (url && url !== void 0) {
      url = Url.parse(url);
      if (url.protocol === null) {
        url.protocol = 'http:';
      }
      if (url.href.substring(0, 1) === '/' && url.href.substring(0, 2) !== '//') {
        url.href = url.protocol + "//" + domain + url.href;
      } else if (url.href.substring(0, 2) === '//') {
        url.href = url.protocol + url.href;
      } else if (url.href === '/') {
        url.href = domain;
      } else if (url.href.substring(0, 2) === './') {
        url.href = url.protocol + "//" + domain + url.href;
      } else if (url.href.substring(0, 1) === '#') {
        url.href = url.protocol + "//" + domain + url.href;
      } else if (url.href.substring(0, 3) === '../') {
        url.href = url.protocol + "//" + domain + "/" + url.href;
      } else if (url.href.substring(0, 11) === 'javascript:') {
        return void 0;
      } else if (url.href.substring(0, 7) === 'mailto:') {
        return void 0;
      }
      return url.href;
    }
  };

  return Parser;

})();

module.exports = Parser;

//# sourceMappingURL=parser.js.map
