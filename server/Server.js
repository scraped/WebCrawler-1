// Generated by CoffeeScript 1.11.1
var Api, Config, Database, Engine, Locales, Logger, Mailer, Request, Security, Server, Session, Sockets, Tokens, colors, express, http;

http = require('http');

colors = require('colors');

express = require('express');

Config = require(__dirname + "/../config");

Logger = require('./logger/Logger');

Mailer = require('./mailer/Mailer');

Engine = require('./rendering/Engine');

Request = require('./requests/Request');

Locales = require('./locales/Locales');

Session = require('./session/Session');

Sockets = require('./sockets/Sockets');

Tokens = require('./tokens/Tokens');

Security = require('./security/Security');

Database = require('./database/Database');

Api = require('./api/Api');

module.exports = Server = (function() {
  function Server(options) {
    if (options == null) {
      options = {};
    }
    this.port = options.port || process.env.PORT || 5001;
    this.app = express();
    this.app.config = Config;
    this.app.logger = Logger;
  }

  Server.prototype.start = function() {
    this.app.logger.info('\u279F'.red.bold + ' Starting server...');
    this.engine = new Engine(this.app);
    this.request = new Request(this.app);
    this.session = new Session(this.app);
    this.locales = new Locales(this.app);
    this.tokens = new Tokens(this.app);
    this.security = new Security(this.app);
    this.mailer = new Mailer(this.app);
    this.instance = http.createServer(this.app);
    this.sockets = new Sockets(this.app, this.instance);
    this.api = new Api(this.app, (function(_this) {
      return function() {
        return _this.listen();
      };
    })(this));
    return this.app.mailer = this.mailer;
  };

  Server.prototype.listen = function() {
    return this.instance.listen(this.port, (function(_this) {
      return function() {
        var char, str;
        char = '*';
        str = 'Server started on port: %s';
        _this.app.logger.info(char.repeat(str.length + _this.port.toString().length + 2).cyan);
        _this.app.logger.info(char.cyan + ' '.repeat(str.length + _this.port.toString().length) + char.cyan);
        _this.app.logger.info(char.cyan + ' ' + str + ' ' + char.cyan, _this.port.toString().bold.green);
        _this.app.logger.info(char.cyan + ' '.repeat(str.length + _this.port.toString().length) + char.cyan);
        return _this.app.logger.info(char.repeat(str.length + _this.port.toString().length + 2).cyan);
      };
    })(this));
  };

  return Server;

})();

//# sourceMappingURL=Server.js.map
